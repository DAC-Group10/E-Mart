// <auto-generated />
using System;
using EMart.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EMart.Migrations
{
    [DbContext(typeof(Appdbcontext))]
    partial class AppdbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EMart.Models.Authentication", b =>
                {
                    b.Property<int>("Auth_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Uname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("cust_Id")
                        .HasColumnType("int");

                    b.HasKey("Auth_Id");

                    b.HasIndex("cust_Id")
                        .IsUnique();

                    b.ToTable("Authentication");
                });

            modelBuilder.Entity("EMart.Models.Cart", b =>
                {
                    b.Property<int>("cart_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("cust_Id")
                        .HasColumnType("int");

                    b.Property<int>("product_Id")
                        .HasColumnType("int");

                    b.HasKey("cart_Id");

                    b.HasIndex("product_Id")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("EMart.Models.Category", b =>
                {
                    b.Property<int>("Catmaster_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CatImgPath")
                        .HasColumnType("longtext");

                    b.Property<string>("Cat_Id")
                        .HasColumnType("longtext");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Flag")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Subcat_Id")
                        .HasColumnType("longtext");

                    b.HasKey("Catmaster_Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("EMart.Models.Customer", b =>
                {
                    b.Property<int>("Cust_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddLine1")
                        .HasColumnType("longtext");

                    b.Property<string>("AddLine2")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("CustName")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<long>("PhoneNo")
                        .HasColumnType("bigint");

                    b.Property<long?>("Pincode")
                        .HasColumnType("bigint");

                    b.Property<int>("RedeemPoints")
                        .HasColumnType("int");

                    b.HasKey("Cust_Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("EMart.Models.Invoice", b =>
                {
                    b.Property<int>("Invoice_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cust_Id")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerCust_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("PayableAmt")
                        .HasColumnType("double");

                    b.Property<double>("Tax")
                        .HasColumnType("double");

                    b.Property<double>("TotalAmt")
                        .HasColumnType("double");

                    b.HasKey("Invoice_Id");

                    b.HasIndex("CustomerCust_Id");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("EMart.Models.Product", b =>
                {
                    b.Property<int>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CardholdersPrice")
                        .HasColumnType("int");

                    b.Property<int>("Catmaster_Id")
                        .HasColumnType("int");

                    b.Property<int>("MrpPrice")
                        .HasColumnType("int");

                    b.Property<int>("Points_To_Be_Redeem")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductImage")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Product_Id");

                    b.HasIndex("Catmaster_Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("EMart.Models.Authentication", b =>
                {
                    b.HasOne("EMart.Models.Customer", "customer")
                        .WithOne("authentication")
                        .HasForeignKey("EMart.Models.Authentication", "cust_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("EMart.Models.Cart", b =>
                {
                    b.HasOne("EMart.Models.Product", "product")
                        .WithOne("cart")
                        .HasForeignKey("EMart.Models.Cart", "product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("EMart.Models.Invoice", b =>
                {
                    b.HasOne("EMart.Models.Customer", null)
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerCust_Id");
                });

            modelBuilder.Entity("EMart.Models.Product", b =>
                {
                    b.HasOne("EMart.Models.Category", "category")
                        .WithMany("Products")
                        .HasForeignKey("Catmaster_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("EMart.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EMart.Models.Customer", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("authentication")
                        .IsRequired();
                });

            modelBuilder.Entity("EMart.Models.Product", b =>
                {
                    b.Navigation("cart");
                });
#pragma warning restore 612, 618
        }
    }
}
